/**
 * @file jsr.h
 * @brief Мінімальні утиліти ЧИТАННЯ JSON (без зовнішніх залежностей).
 *
 * Призначення: спростити вибіркове читання значень із простих JSON‑об’єктів
 * без повного парсера. Підтримується пошук значення за ключем, отримання
 * сирого фрагмента, читання рядків (із розекрануванням), булевих і числових
 * значень.
 *
 * Обмеження:
 * - Це не повний валідатор JSON; робота коректна для відносно «плоских» об’єктів.
 * - Unicode у послідовностях \uXXXX обробляється спрощено: символи мапляться на '?'.
 * - Усі рядки очікуються у UTF‑8; екранування/розекранування — на рівні байтів.
 */
#ifndef CPLOT_JSR_H
#define CPLOT_JSR_H

#include <stddef.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Пропустити пропуски у JSON‑вхідних даних.
 *
 * @param p Вказівник на початок ділянки.
 * @return Вказівник на перший символ після послідовності пробільних символів.
 */
const char *json_skip_ws (const char *p);

/**
 * Знайти значення за ключем у JSON‑рядку.
 *
 * Пошук виконується за першим входженням ключа у лапках, після чого очікується ':' і саме
 * значення. Повертається вказівник на перший непробільний символ значення.
 *
 * @param json Повний JSON‑рядок.
 * @param key  Ім’я ключа без лапок.
 * @return Вказівник на початок значення або NULL, якщо ключ не знайдено.
 */
const char *json_find_value (const char *json, const char *key);

/**
 * Отримати сире значення для ключа як фрагмент початкового рядка.
 *
 * Повертає підрядок, який охоплює значення (число/булеве/рядок/масив/об’єкт) без обрізання
 * лапок чи дужок. Підрядок дійсний поки дійсний початковий json.
 *
 * @param json     Повний JSON‑рядок.
 * @param key      Ім’я ключа без лапок.
 * @param out_ptr  Вихід: вказівник на початок фрагмента значення (без копіювання).
 * @param out_len  Вихід: довжина фрагмента у байтах.
 * @return 1 якщо ключ знайдено; 0 якщо ні.
 */
int json_get_raw (const char *json, const char *key, const char **out_ptr, size_t *out_len);

/**
 * Отримати рядкове значення (розекрановане) за ключем.
 *
 * Підтримуються послідовності \n, \r, \t, \", \\, \/, \uXXXX (мапиться на '?').
 * Повертається новий буфер, який має бути звільнений викликачем через free().
 *
 * @param json     Повний JSON‑рядок.
 * @param key      Ім’я ключа без лапок.
 * @param out_len  Вихід: довжина розекранованого рядка (без NUL); може бути NULL.
 * @return Вказівник на новий буфер або NULL, якщо ключ не знайдено чи значення не є рядком.
 */
char *json_get_string (const char *json, const char *key, size_t *out_len);

/**
 * Отримати булеве значення за ключем.
 *
 * @param json    Повний JSON‑рядок.
 * @param key     Ім’я ключа без лапок.
 * @param defval  Типове значення, якщо ключ відсутній або значення не є булевим.
 * @return 1 для true, 0 для false, або defval якщо неможливо визначити.
 */
int json_get_bool (const char *json, const char *key, int defval);

/**
 * Отримати число з плаваючою крапкою за ключем.
 *
 * @param json    Повний JSON‑рядок.
 * @param key     Ім’я ключа без лапок.
 * @param defval  Типове значення, якщо ключ відсутній або значення не є числом.
 * @return Значення double або defval при помилці розбору.
 */
double json_get_double (const char *json, const char *key, double defval);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* CPLOT_JSR_H */
